> # Pooled variance t-test (equal variance assumed)
> t.test.pool <- function(y1,y2,alpha=0.05) {
+   n1 <- length(y1)
+   n2 <- length(y2)
+   s1 <- sqrt(var(y1))
+   s2 <- sqrt(var(y2))
+   df <- n1 + n2 - 2
+   s.pool <- sqrt( ( (n1-1)*s1^2 + (n2-1)*s2^2 ) / ( n1 + n2 - 2 ) )
+   test.statistic <- ( mean(y1) - mean(y2) ) / ( s.pool * sqrt( 1.0/n1 + 1.0/n2 ) )
+   if ( abs(test.statistic) >= qt(1-alpha/2,df) ) {
+     return(TRUE)
+   } else {
+     return(FALSE)
+   }
+ }
> 
> # Seperate variance t-test (Law of Large Numbers applied)
> t.test.clt <- function(y1,y2,alpha=0.05) {
+   n1 <- length(y1)
+   n2 <- length(y2)
+   s1 <- sqrt(var(y1))
+   s2 <- sqrt(var(y2))
+   df <- n1 + n2 - 2
+   test.statistic <- ( mean(y1) - mean(y2) ) / sqrt( s1^2/n1 + s2^2/n2 )
+   if ( abs(test.statistic) >= qnorm(1-alpha/2) ) {
+     return(TRUE)
+   } else {
+     return(FALSE)
+   }
+ }
> 
> # Welch approximation t-test (degrees of freedom motified)
> t.test.welch <- function(y1,y2,alpha=0.05) {
+   n1 <- length(y1)
+   n2 <- length(y2)
+   s1 <- sqrt(var(y1))
+   s2 <- sqrt(var(y2))
+   k <- (s1^2/n1) / (s1^2/n1 + s2^2/n2)
+   df <- (n1-1)*(n2-1)/((1-k)^2*(n1-1)+k^2*(n2-1))
+   test.statistic <- ( mean(y1) - mean(y2) ) / sqrt( s1^2/n1 + s2^2/n2 )
+   if ( abs(test.statistic) >= qt(1-alpha/2,df) ) {
+     return(TRUE)
+   } else {
+     return(FALSE)
+   }
+ }
> 
> # Permutation test under the assumption that the variances are equal
> z.test.permute1 <- function(y1.original,y2.original,alpha=0.05) {
+   set.seed(536)                      # Set the random number seed so results
+                                      # can be exactly replicated.
+   n1 <- length(y1.original)
+   n2 <- length(y2.original)
+   n <- n1 + n2
+   s1 <- sqrt(var(y1.original))
+   s2 <- sqrt(var(y2.original))
+   df <- n - 2
+   test.statistic <- ( mean(y1.original) - mean(y2.original) ) / sqrt( s1^2/n1 + s2^2/n2 )
+ 
+   n.permutations <- 100
+   draws <- numeric(n.permutations)
+   y <- numeric(n)
+   for ( i in 1:n.permutations ) {
+     y[1:n1] <- y1.original
+     y[(n1+1):n] <- y2.original
+     y <- sample(y,n)   # Permute
+     y1 <- y[1:n1]
+     y2 <- y[(n1+1):n]
+     s1 <- sqrt(var(y1))
+     s2 <- sqrt(var(y2))
+     draws[i] <- ( mean(y1) - mean(y2) ) / sqrt( s1^2/n1 + s2^2/n2 )
+   }
+   p.value = ( sum( draws > abs(test.statistic) ) + sum( draws < -abs(test.statistic) ) ) / length(draws)
+   if ( p.value <= alpha ) {
+     return(FALSE)
+   } else {
+     return(TRUE)
+   }
+ }
> 
> # Permutation test under where the data are transformed 
> # such that the means are unchanged, but the sample variances are equal
> z.test.permute2 <- function(y1.original,y2.original,alpha=0.05) {
+   set.seed(536)                      # Set the random number seed so results
+                                      # can be exactly replicated.
+   return(z.test.permute1(y1.original / sqrt(var(y1.original)),
+   y2.original / sqrt(var(y2.original)),alpha))
+ }
> 
> 
> # Simulation parameters
> n1 <- 6
> n2 <- 10
> mu1 <- 0
> sigma1 <- 1
> mu2 <- c(0,0.5,1.0,2.0)
> sigma2 <- c(0.25,1.0,2.0,5.0)
> nreps <- 10000
> alpha <- 0.10
> 
> 
> # Storage for point estimates of power with row and column labels
> # Note: You might be tempted to call the variable "dimnames", but that
> #       would mask the function with the same name.
> dnames <- list(paste("sigma2=",sigma2,sep=""),paste("mu2=",mu2,sep=""))
> power.pool <- matrix(NA,nrow=length(sigma2),ncol=length(mu2),dimnames=dnames)
> power.clt <- matrix(NA,nrow=length(sigma2),ncol=length(mu2),dimnames=dnames)
> power.welch <- matrix(NA,nrow=length(sigma2),ncol=length(mu2),dimnames=dnames)
> power.permute1 <- matrix(NA,nrow=length(sigma2),ncol=length(mu2),dimnames=dnames)
> power.permute2 <- matrix(NA,nrow=length(sigma2),ncol=length(mu2),dimnames=dnames)
> 
> # Storage for confidence intervals of power
> dnames <- list(paste("sigma2=",sigma2,sep=""),rep(paste("mu2=",mu2,sep=""),each=2))
> ci.pool <- matrix(NA,nrow=length(sigma2),ncol=2*length(mu2),dimnames=dnames)
> ci.clt <- matrix(NA,nrow=length(sigma2),ncol=2*length(mu2),dimnames=dnames)
> ci.welch <- matrix(NA,nrow=length(sigma2),ncol=2*length(mu2),dimnames=dnames)
> ci.permute1 <- matrix(NA,nrow=length(sigma2),ncol=2*length(mu2),dimnames=dnames)
> ci.permute2 <- matrix(NA,nrow=length(sigma2),ncol=2*length(mu2),dimnames=dnames)
> 
> for ( i in 1:length(sigma2) ) {
+   for ( j in 1:length(mu2) ) {
+     results <- matrix(NA,nrow=nreps,ncol=5)
+     for ( k in 1:nreps ) {
+       y1 <- rnorm(n1,mean=mu1,sd=sigma1)
+       y2 <- rnorm(n2,mean=mu2[j],sd=sigma2[i])
+       results[k,1:3] <- c(t.test.pool(y1,y2,alpha),t.test.clt(y1,y2,alpha),t.test.welch(y1,y2,alpha))
+     }
+     # Point estimates
+     power.pool[i,j]  <- mean(results[,1])
+     power.clt[i,j]   <- mean(results[,2])
+     power.welch[i,j] <- mean(results[,3])
+ 
+     # 95% confidence interval
+     ci.pool[i,rep(2*(j-1),2)+c(1,2)]  <- power.pool[i,j]  + c(-1,1) * 1.96 * sqrt( var(results[,1])/nreps )
+     ci.clt[i,rep(2*(j-1),2)+c(1,2)]   <- power.clt[i,j]   + c(-1,1) * 1.96 * sqrt( var(results[,2])/nreps )
+     ci.welch[i,rep(2*(j-1),2)+c(1,2)] <- power.welch[i,j] + c(-1,1) * 1.96 * sqrt( var(results[,3])/nreps )
+   }
+ }
> nreps <- 100
> for ( i in 1:length(sigma2) ) {
+   for ( j in 1:length(mu2) ) {
+     for ( k in 1:nreps ) {
+       y1 <- rnorm(n1,mean=mu1,sd=sigma1)
+       y2 <- rnorm(n2,mean=mu2[j],sd=sigma2[i])
+       results[k,4:5] <- c(z.test.permute1(y1,y2,alpha),z.test.permute2(y1,y2,alpha))
+     }
+     # Point estimates
+     power.permute1[i,j] <- mean(results[1:nreps,4])
+     power.permute2[i,j] <- mean(results[1:nreps,5])
+ 
+     # 95% confidence interval
+     ci.permute1[i,rep(2*(j-1),2)+c(1,2)] <- power.permute1[i,j] + c(-1,1) * 1.96 * sqrt( var(results[1:nreps,4])/nreps )
+     ci.permute2[i,rep(2*(j-1),2)+c(1,2)] <- power.permute2[i,j] + c(-1,1) * 1.96 * sqrt( var(results[1:nreps,5])/nreps )
+   }
+ }
> power.pool
             mu2=0 mu2=0.5  mu2=1  mu2=2
sigma2=0.25 0.2208  0.4614 0.8479 0.9995
sigma2=1    0.1002  0.2463 0.5796 0.9771
sigma2=2    0.0639  0.1084 0.2621 0.7151
sigma2=5    0.0508  0.0572 0.0850 0.2004
> power.clt
             mu2=0 mu2=0.5  mu2=1  mu2=2
sigma2=0.25 0.1616  0.3768 0.7793 0.9987
sigma2=1    0.1294  0.2851 0.6242 0.9820
sigma2=2    0.1257  0.1925 0.3966 0.8353
sigma2=5    0.1309  0.1531 0.2009 0.3747
> power.welch
             mu2=0 mu2=0.5  mu2=1  mu2=2
sigma2=0.25 0.1083  0.2842 0.6733 0.9946
sigma2=1    0.1019  0.2397 0.5628 0.9705
sigma2=2    0.0993  0.1606 0.3528 0.8012
sigma2=5    0.0987  0.1213 0.1577 0.3164
> power.permute1
            mu2=0 mu2=0.5 mu2=1 mu2=2
sigma2=0.25     1       1     1     0
sigma2=1        0       1     1     1
sigma2=2        0       1     1     1
sigma2=5        0       0     1     1
> power.permute2
            mu2=0 mu2=0.5 mu2=1 mu2=2
sigma2=0.25     0       0     0     0
sigma2=1        0       1     1     0
sigma2=2        0       1     1     1
sigma2=5        0       1     1     1
> ci.pool
                 mu2=0      mu2=0    mu2=0.5    mu2=0.5      mu2=1      mu2=1     mu2=2     mu2=2
sigma2=0.25 0.21266979 0.22893021 0.45162876 0.47117124 0.84086094 0.85493906 0.9990618 0.9999382
sigma2=1    0.09431448 0.10608552 0.23785481 0.25474519 0.56992450 0.58927550 0.9741680 0.9800320
sigma2=2    0.05910610 0.06869390 0.10230635 0.11449365 0.25347994 0.27072006 0.7062528 0.7239472
sigma2=5    0.04649584 0.05510416 0.05264817 0.06175183 0.07953365 0.09046635 0.1925537 0.2082463
> ci.clt
                mu2=0     mu2=0   mu2=0.5   mu2=0.5     mu2=1     mu2=1     mu2=2     mu2=2
sigma2=0.25 0.1543852 0.1688148 0.3673017 0.3862983 0.7711711 0.7874289 0.9979937 0.9994063
sigma2=1    0.1228211 0.1359789 0.2762509 0.2939491 0.6147067 0.6336933 0.9793940 0.9846060
sigma2=2    0.1192021 0.1321979 0.1847720 0.2002280 0.3870114 0.4061886 0.8280298 0.8425702
sigma2=5    0.1242888 0.1375112 0.1460420 0.1601580 0.1930464 0.2087536 0.3652122 0.3841878
> ci.welch
                 mu2=0     mu2=0   mu2=0.5   mu2=0.5     mu2=1     mu2=1     mu2=2     mu2=2
sigma2=0.25 0.10220882 0.1143912 0.2753593 0.2930407 0.6641070 0.6824930 0.9931635 0.9960365
sigma2=1    0.09597038 0.1078296 0.2313323 0.2480677 0.5530771 0.5725229 0.9671834 0.9738166
sigma2=2    0.09343804 0.1051620 0.1534033 0.1677967 0.3434338 0.3621662 0.7933773 0.8090227
sigma2=5    0.09285384 0.1045462 0.1149008 0.1276992 0.1505562 0.1648438 0.3072842 0.3255158
> ci.permute1
            mu2=0 mu2=0 mu2=0.5 mu2=0.5 mu2=1 mu2=1 mu2=2 mu2=2
sigma2=0.25     1     1       1       1     1     1     0     0
sigma2=1        0     0       1       1     1     1     1     1
sigma2=2        0     0       1       1     1     1     1     1
sigma2=5        0     0       0       0     1     1     1     1
> ci.permute2
            mu2=0 mu2=0 mu2=0.5 mu2=0.5 mu2=1 mu2=1 mu2=2 mu2=2
sigma2=0.25     0     0       0       0     0     0     0     0
sigma2=1        0     0       1       1     1     1     0     0
sigma2=2        0     0       1       1     1     1     1     1
sigma2=5        0     0       1       1     1     1     1     1